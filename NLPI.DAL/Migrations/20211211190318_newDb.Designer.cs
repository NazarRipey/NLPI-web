// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLPI.DAL;

namespace NLPI.DAL.Migrations
{
    [DbContext(typeof(NLPIDbContext))]
    [Migration("20211211190318_newDb")]
    partial class newDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("NLPI.Core.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Answer");

                    b.Property<int?>("CorrectPosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextAnswer")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKAnswer");

                    b.HasIndex("TaskId");

                    b.HasIndex("TestTaskId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectPosition = 4,
                            IsCorrect = true,
                            TaskId = 1,
                            TextAnswer = "Compatibility Testing"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "Volume testing"
                        },
                        new
                        {
                            Id = 3,
                            CorrectPosition = 2,
                            IsCorrect = true,
                            TaskId = 1,
                            TextAnswer = "Defect Validation"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "Installability testing"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "GUI testing"
                        },
                        new
                        {
                            Id = 6,
                            CorrectPosition = 1,
                            IsCorrect = true,
                            TaskId = 1,
                            TextAnswer = "Smoke testing"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "Accessibility testing"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "New feature testing"
                        },
                        new
                        {
                            Id = 9,
                            CorrectPosition = 3,
                            IsCorrect = true,
                            TaskId = 1,
                            TextAnswer = "Regression Testing"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            TaskId = 1,
                            TextAnswer = "Safety testing"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            TaskId = 2,
                            TextAnswer = "Type in field incorrect email"
                        },
                        new
                        {
                            Id = 12,
                            CorrectPosition = 5,
                            IsCorrect = true,
                            TaskId = 2,
                            TextAnswer = "Validate that link is working correctly"
                        },
                        new
                        {
                            Id = 13,
                            CorrectPosition = 3,
                            IsCorrect = true,
                            TaskId = 2,
                            TextAnswer = "Type in field valid account’s email"
                        },
                        new
                        {
                            Id = 14,
                            CorrectPosition = 4,
                            IsCorrect = true,
                            TaskId = 2,
                            TextAnswer = "Check that email for a new letter with link"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            TaskId = 2,
                            TextAnswer = "Return on main page"
                        },
                        new
                        {
                            Id = 16,
                            CorrectPosition = 2,
                            IsCorrect = true,
                            TaskId = 2,
                            TextAnswer = "Click on link «Forgot your password ?»"
                        },
                        new
                        {
                            Id = 17,
                            CorrectPosition = 1,
                            IsCorrect = true,
                            TaskId = 2,
                            TextAnswer = "Open Log In page(Log out if necessary)"
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            TaskId = 2,
                            TextAnswer = "Log In system / or check that you are in"
                        });
                });

            modelBuilder.Entity("NLPI.Core.Models.Hint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Hint");

                    b.Property<string>("HintText")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("HintType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdTask")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdTaskNavigationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKHint");

                    b.HasIndex("IdTaskNavigationId");

                    b.ToTable("Hints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HintText = "CSS",
                            HintType = "CSS",
                            IdTask = 1
                        });
                });

            modelBuilder.Entity("NLPI.Core.Models.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_TaskType");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKTaskType");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Testing type clasification"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Test case creation"
                        });
                });

            modelBuilder.Entity("NLPI.Core.Models.TestTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Task");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("XPKTask");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Owner wants to make his web-app compatible with other actual browsers and OS.",
                            Name = "Crossplatform test classification",
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Check if link with password recovery in auto email is working correctly.",
                            Name = "Password recovery test case",
                            TaskTypeId = 2
                        });
                });

            modelBuilder.Entity("NLPI.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_User");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("XPKUser");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "12345",
                            Phone = "0123456789",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "student@gmail.com",
                            FirstName = "Student",
                            LastName = "Student",
                            Password = "12345",
                            Phone = "1234567890",
                            Role = "User"
                        },
                        new
                        {
                            Id = 3,
                            Email = "nripey@gmail.com",
                            FirstName = "Nazar",
                            LastName = "Ripey",
                            Password = "12345",
                            Phone = "2345678901",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("NLPI.Core.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrectAndInRightPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserResultId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserResultId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("NLPI.Core.Models.UserTaskResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserTaskResults");
                });

            modelBuilder.Entity("NLPI.Core.Models.Answer", b =>
                {
                    b.HasOne("NLPI.Core.Models.TestTask", "Task")
                        .WithMany("Answers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLPI.Core.Models.TestTask", null)
                        .WithMany("EtalonAnswers")
                        .HasForeignKey("TestTaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("NLPI.Core.Models.Hint", b =>
                {
                    b.HasOne("NLPI.Core.Models.TestTask", "IdTaskNavigation")
                        .WithMany()
                        .HasForeignKey("IdTaskNavigationId");

                    b.Navigation("IdTaskNavigation");
                });

            modelBuilder.Entity("NLPI.Core.Models.TestTask", b =>
                {
                    b.HasOne("NLPI.Core.Models.TaskType", "TaskType")
                        .WithMany("TestTasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("NLPI.Core.Models.UserAnswer", b =>
                {
                    b.HasOne("NLPI.Core.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLPI.Core.Models.UserTaskResult", "UserResult")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("UserResult");
                });

            modelBuilder.Entity("NLPI.Core.Models.TaskType", b =>
                {
                    b.Navigation("TestTasks");
                });

            modelBuilder.Entity("NLPI.Core.Models.TestTask", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("EtalonAnswers");
                });

            modelBuilder.Entity("NLPI.Core.Models.UserTaskResult", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
